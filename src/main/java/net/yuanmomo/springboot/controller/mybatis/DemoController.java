package net.yuanmomo.springboot.controller.mybatis;

import net.yuanmomo.springboot.bean.Demo;
import net.yuanmomo.springboot.bean.DemoParam;
import net.yuanmomo.springboot.business.mybatis.DemoBusiness;
import net.yuanmomo.springboot.exception.BaseException;
import net.yuanmomo.springboot.util.AjaxResponseBean;
import net.yuanmomo.springboot.util.NumberUtil;
import net.yuanmomo.springboot.util.PaginationBean;
import net.yuanmomo.springboot.util.PaginationUtil;
import org.apache.commons.collections4.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
@RequestMapping("/backend/demo")
public class DemoController {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table demo
     *
     * @mbg.generated
     */
    private static Logger logger = LoggerFactory.getLogger(DemoController.class);

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table demo
     *
     * @mbg.generated
     */
    @Autowired
    private DemoBusiness demoBusiness;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table demo
     *
     * @mbg.generated
     */
    @RequestMapping(value = "insert.do")
    public AjaxResponseBean insert(@ModelAttribute("demo")  Demo demo) {
        try {
            // 数据校验
            
            long id = this.demoBusiness.insertSelective(demo);
            return AjaxResponseBean.getReturnValueResponseBean(demo.getId());
        } catch (BaseException e1) {
            return AjaxResponseBean.getErrorResponseBean("异常" + e1.getKey());
        } catch (Exception e) {
            logger.error("插入异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("插入异常" + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table demo
     *
     * @mbg.generated
     */
    @RequestMapping(value = "getDemoByKey.do")
    public AjaxResponseBean getDemoByKey(@RequestParam("id")  Long id) {
        try {
            if(id == null || id < 0){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            Demo result = this.demoBusiness.getDemoByKey(id);
            return AjaxResponseBean.getReturnValueResponseBean(result);
        } catch (BaseException e1) {
            return AjaxResponseBean.getErrorResponseBean("异常" + e1.getKey());
        } catch (Exception e) {
            logger.error("主键获取详情异常;key="+id + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("主键获取详情异常;key="+id + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table demo
     *
     * @mbg.generated
     */
    @RequestMapping(value = "selectDemoList.do")
    public AjaxResponseBean selectDemoList(@RequestParam(value = "conditionType",required = false)  Short conditionType, @RequestParam(value ="conditionValue",required = false)  String conditionValue, @ModelAttribute  PaginationBean paginationBean) {
        try {
            long currentPage = paginationBean.getPageNum();
            long pageSize = paginationBean.getNumPerPage(); 
            
            if(pageSize < 1){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            if(currentPage<1){
                return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN; 
            }
            // 构造查询参数
            DemoParam param =new DemoParam();
            //DemoParam.Criteria criteria = param.createCriteria();
            
            // 根据参数设置查询条件
            
            // 取得当前查询的总记录结果
            long total = this.demoBusiness.countDemoList(param);
            if(total == 0){
                // 没有记录数
                return AjaxResponseBean.getNoDataReturnValueResponseBean();
            }
            paginationBean.setTotalCount(total);
            // 判断当前请求的页码有没有超过总页数
            long totalPages = PaginationUtil.getPages(total, pageSize);
            paginationBean.setTotalPages(totalPages);
            
            if(currentPage > totalPages){
                // 当前页超过总页数,取最大数
                currentPage = totalPages;
                paginationBean.setPageNum(currentPage);
            }
            
            // 设置排序
            // param.setOrderByClause(" id asc ");
            
            long start = (currentPage - 1) * pageSize;
            param.setStart(start);
            param.setCount(pageSize);
            
            List<Demo> demoList = this.demoBusiness.selectDemoList(param);
            
            paginationBean.setResult(demoList);  // 返回数据结果
            return AjaxResponseBean.getReturnValueResponseBean(paginationBean);
        } catch (BaseException e1) {
            return AjaxResponseBean.getErrorResponseBean("异常" + e1.getKey());
        } catch (Exception e) {
            logger.error("查询异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("查询异常" + e.getMessage());
        }
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table demo
     *
     * @mbg.generated
     */
    @RequestMapping(value = "updateSaveDemo.do")
    public AjaxResponseBean updateSaveDemo(@ModelAttribute  Demo demo) {
        try {
            if(demo == null //){
                || NumberUtil.isNotPositive(demo.getId())){
                    return AjaxResponseBean.Const.PARAMETER_INVALID_ERROR_RESPONSE_BEAN;
                }
                int updateCount = this.demoBusiness.update(demo);
                if(updateCount >0 ){
                    return AjaxResponseBean.Const.SUCCESS_RESPONSE_BEAN;
                }
                return AjaxResponseBean.Const.ERROR_RESPONSE_BEAN;
            } catch (BaseException e1) {
                return AjaxResponseBean.getErrorResponseBean("异常" + e1.getKey());
            } catch (Exception e) {
                logger.error("更新异常" + e.getMessage());
                return AjaxResponseBean.getErrorResponseBean("更新异常" + e.getMessage());
            }
        }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table demo
     *
     * @mbg.generated
     */
    @RequestMapping(value = "batchUpdateSaveDemo.do")
    public AjaxResponseBean batchUpdateSaveDemo(@ModelAttribute  net.yuanmomo.springboot.controller.mybatis.DemoController.DemoList demoList) {
        try {
            if(demoList != null && CollectionUtils.isNotEmpty(demoList.getDemoList())){
                int updateCount = this.demoBusiness.update(demoList.getDemoList());
                if(updateCount >0 ){
                    return AjaxResponseBean.Const.SUCCESS_RESPONSE_BEAN;
                }
            }
            return AjaxResponseBean.Const.ERROR_RESPONSE_BEAN;
        } catch (BaseException e1) {
            return AjaxResponseBean.getErrorResponseBean("异常" + e1.getKey());
        } catch (Exception e) {
            logger.error("批量更新异常" + e.getMessage());
            return AjaxResponseBean.getErrorResponseBean("批量更新异常" + e.getMessage());
        }
    }

    static class DemoList {
        private List<Demo> demoList;

        public List<Demo> getDemoList() {
            return demoList;
        }

        public void setDemoList(List<Demo> demoList) {
            this.demoList = demoList;
        }
    }
}
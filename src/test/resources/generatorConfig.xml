<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <!-- propertis 配置文件 -->
    <properties resource="application.properties" />

    <!-- MBG根配置 -->
    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">

        <!-- 生成hashCode()和equals()方法的插件 -->
        <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

        <!-- bean类序列化插件 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

        <!-- sql like 查询是否区分大小写插件 -->
        <plugin type="org.mybatis.generator.plugins.CaseInsensitiveLikePlugin" />

        <!-- 生成toString() 方法插件 -->
        <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />

        <!-- 重命名Bean查询条件类的类名，默认命名Example -->
        <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
            <property name="searchString" value="Example$" />
            <property name="replaceString" value="Param" />
        </plugin>

        <!-- *******************************下面的插件都是自定义插件******************************* -->
        <!-- 增加一个 selectOne 的 方法  -->
        <plugin type="net.yuanmomo.mbg.plugin.selectone.MapperAddSelectOneByExamplePlugin" />
        <plugin type="net.yuanmomo.mbg.plugin.selectone.ProviderAddSelectOneByExamplePlugin" />

        <!-- 分页插件， 自带的是假分页，效率很低  -->
        <plugin type="net.yuanmomo.mbg.plugin.PaginationPlugin" />

        <!-- 生成别名，在表关联简单查询时使用  -->
        <plugin type="net.yuanmomo.mbg.plugin.alias.AliasPlugin" />

        <!-- 单独生成一个DAO的JAVA文件和XML文件，存放自定义SQL，将自动生成和自定义分开 -->
        <plugin type="net.yuanmomo.mbg.plugin.DAOPlugin" >
            <property name="typeName" value="DAO"/>
        </plugin>

        <!-- 生成business，简单的增删改查业务 -->
        <plugin type="net.yuanmomo.mbg.plugin.business.BusinessPlugin" >
            <property name="businessPackage" value="${mbg.businessPackage}"/>
        </plugin>

        <!-- 生成controller, 不再需要单独配置生成business插件，会默认自动生成business
            type="${pluginBasePackage}.controller.jsp.ControllerPlugin" ==> 生成返回视图的controller
            type="${pluginBasePackage}.controller.json.ControllerPlugin" ==> 生成返回json的controller
         -->
        <plugin type="net.yuanmomo.mbg.plugin.controller.json.ControllerPlugin" >
            <property name="businessPackage" value="${mbg.businessPackage}"/>
            <property name="controllerPackage" value="${mbg.controllerPackage}"/>
            <property name="exceptionClass" value="${mbg.exceptionClass}"/>
        </plugin>
        <!-- *******************************上面的插件都是自定义插件******************************* -->


        <!-- 生成的注释配置，不输入注释中的时间 -->
        <commentGenerator>
            <property name="suppressDate" value="true" />
        </commentGenerator>

        <!-- 数据库连接信息 -->
        <jdbcConnection driverClass="${spring.datasource.driver-class-name}" connectionURL="${spring.datasource.url}"
                        userId="${spring.datasource.username}" password="${spring.datasource.password}">
        </jdbcConnection>

        <!-- Java 生成的bean中字段类型配置 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!-- java 生成Bean类的配置 -->
        <javaModelGenerator targetPackage="${mbg.modelPackage}"
                            targetProject="${mbg.targetProject}">
            <property name="enableSubPackages" value="true" />
        </javaModelGenerator>

        <!-- java 生成xml文件的配置 -->
        <!--<sqlMapGenerator targetPackage="${mbg.sqlMapPackage}"-->
                         <!--targetProject="${mbg.targetProject}">-->
            <!--<property name="enableSubPackages" value="true" />-->
        <!--</sqlMapGenerator>-->

        <!-- java 生成 mapper类的配置 -->
        <javaClientGenerator type="ANNOTATEDMAPPER"
                             targetPackage="${mbg.javaClientPackage}" targetProject="${mbg.targetProject}">
            <property name="enableSubPackages" value="true" />
        </javaClientGenerator>

        <!-- 配置需要自动生成的表，可配置多个table标签 -->
        <table tableName="demo" domainObjectName="Demo" >
            <!-- 配置数据库的名称，等于 schema, 这样生成的 sql 就是 schema.table, 可以实现单实例多库的操作 -->
            <!--<property name="runtimeSchema" value="test"/>-->

            <!-- 生成的business文件名称,不配置，则不会生成business  -->
            <property name="generatedBusinessName" value="DemoBusiness"/>

            <!-- 生成的controller文件名称，不配置，则不会生成controller -->
            <property name="generatedControllerName" value="DemoController"/>

            <!-- 是否生成自增长主键 -->
            <generatedKey column="id" sqlStatement="MySql" identity="true"/>
        </table>
    </context>
</generatorConfiguration>